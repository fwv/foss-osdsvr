// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: pkg/proto/osdpb/osd_service.proto

package osdpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OsdServiceClient is the client API for OsdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OsdServiceClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// 文件上传
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (OsdService_UploadFileClient, error)
	// 文件下载
	DownloadFile(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (OsdService_DownloadFileClient, error)
}

type osdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOsdServiceClient(cc grpc.ClientConnInterface) OsdServiceClient {
	return &osdServiceClient{cc}
}

func (c *osdServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/osdpb.OsdService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osdServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (OsdService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &OsdService_ServiceDesc.Streams[0], "/osdpb.OsdService/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &osdServiceUploadFileClient{stream}
	return x, nil
}

type OsdService_UploadFileClient interface {
	Send(*FileUploadRequest) error
	CloseAndRecv() (*FileUploadResponse, error)
	grpc.ClientStream
}

type osdServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *osdServiceUploadFileClient) Send(m *FileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *osdServiceUploadFileClient) CloseAndRecv() (*FileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *osdServiceClient) DownloadFile(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (OsdService_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &OsdService_ServiceDesc.Streams[1], "/osdpb.OsdService/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &osdServiceDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OsdService_DownloadFileClient interface {
	Recv() (*FileDownloadResponse, error)
	grpc.ClientStream
}

type osdServiceDownloadFileClient struct {
	grpc.ClientStream
}

func (x *osdServiceDownloadFileClient) Recv() (*FileDownloadResponse, error) {
	m := new(FileDownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OsdServiceServer is the server API for OsdService service.
// All implementations must embed UnimplementedOsdServiceServer
// for forward compatibility
type OsdServiceServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	// 文件上传
	UploadFile(OsdService_UploadFileServer) error
	// 文件下载
	DownloadFile(*FileDownloadRequest, OsdService_DownloadFileServer) error
	mustEmbedUnimplementedOsdServiceServer()
}

// UnimplementedOsdServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOsdServiceServer struct {
}

func (UnimplementedOsdServiceServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedOsdServiceServer) UploadFile(OsdService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedOsdServiceServer) DownloadFile(*FileDownloadRequest, OsdService_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedOsdServiceServer) mustEmbedUnimplementedOsdServiceServer() {}

// UnsafeOsdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OsdServiceServer will
// result in compilation errors.
type UnsafeOsdServiceServer interface {
	mustEmbedUnimplementedOsdServiceServer()
}

func RegisterOsdServiceServer(s grpc.ServiceRegistrar, srv OsdServiceServer) {
	s.RegisterService(&OsdService_ServiceDesc, srv)
}

func _OsdService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsdServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osdpb.OsdService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsdServiceServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsdService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OsdServiceServer).UploadFile(&osdServiceUploadFileServer{stream})
}

type OsdService_UploadFileServer interface {
	SendAndClose(*FileUploadResponse) error
	Recv() (*FileUploadRequest, error)
	grpc.ServerStream
}

type osdServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *osdServiceUploadFileServer) SendAndClose(m *FileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *osdServiceUploadFileServer) Recv() (*FileUploadRequest, error) {
	m := new(FileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OsdService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileDownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OsdServiceServer).DownloadFile(m, &osdServiceDownloadFileServer{stream})
}

type OsdService_DownloadFileServer interface {
	Send(*FileDownloadResponse) error
	grpc.ServerStream
}

type osdServiceDownloadFileServer struct {
	grpc.ServerStream
}

func (x *osdServiceDownloadFileServer) Send(m *FileDownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

// OsdService_ServiceDesc is the grpc.ServiceDesc for OsdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OsdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "osdpb.OsdService",
	HandlerType: (*OsdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _OsdService_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _OsdService_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _OsdService_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/osdpb/osd_service.proto",
}
